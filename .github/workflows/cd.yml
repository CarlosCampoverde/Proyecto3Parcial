name: Continuous Deployment (CD)

# üéØ Triggers: Solo en main y solo si CI pasa
on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

# Variables globales
env:
  NODE_VERSION: '20.x'
  RAILWAY_SERVICE_NAME: 'proyectop2preubas'

jobs:
  # ===============================================
  # VERIFICACI√ìN DE CI - Gate/Precondici√≥n
  # ===============================================
  verify-ci:
    name: ‚úÖ Verify CI Success
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    outputs:
      ci-passed: ${{ steps.check.outputs.passed }}
      performance-passed: ${{ steps.check.outputs.perf-passed }}
    
    steps:
    - name: Check CI workflow result
      id: check
      run: |
        echo "CI workflow result: ${{ github.event.workflow_run.conclusion }}"
        if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "perf-passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ CI and K6 tests passed - proceeding with deployment"
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "perf-passed=false" >> $GITHUB_OUTPUT
          echo "‚ùå CI failed - deployment blocked"
          exit 1
        fi

  # ===============================================
  # STAGING DEPLOYMENT
  # ===============================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: verify-ci
    if: needs.verify-ci.outputs.ci-passed == 'true'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      health-check: ${{ steps.health.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install Railway CLI
    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli@latest
        
    - name: Install dependencies
      run: npm ci --only=production

    # Deploy to Railway Staging
    - name: Deploy to Railway Staging
      id: deploy
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Link to staging service/environment
        railway environment staging 2>/dev/null || railway environment create staging
        railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment staging
        
        # Set staging environment variables
        railway variables set NODE_ENV=staging
        railway variables set JWT_SECRET=${{ secrets.JWT_SECRET_STAGING }}
        railway variables set DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}
        
        # Deploy
        echo "üöÄ Deploying to Railway Staging..."
        railway up --detach
        
        # Get deployment URL
        DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url // "https://proyectop2preubas-staging.railway.app"')
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "üìã Staging deployed to: $DEPLOYMENT_URL"

    # Health check staging
    - name: Health Check Staging
      id: health
      run: |
        STAGING_URL="${{ steps.deploy.outputs.url }}"
        echo "üîç Running health check on: $STAGING_URL"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Health check with retries
        for i in {1..10}; do
          if curl -f -s "$STAGING_URL/api/health" > /dev/null; then
            echo "‚úÖ Health check passed on attempt $i"
            echo "status=healthy" >> $GITHUB_OUTPUT
            break
          else
            echo "‚è≥ Health check failed on attempt $i, retrying..."
            sleep 10
            if [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              echo "status=unhealthy" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        done

  # ===============================================
  # SMOKE TESTS EN STAGING
  # ===============================================
  staging-smoke-tests:
    name: üß™ Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.deploy-staging.outputs.health-check == 'healthy'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run smoke tests on staging
      run: |
        echo "üß™ Running smoke tests on staging..."
        BASE_URL="${{ needs.deploy-staging.outputs.deployment-url }}" k6 run --vus 1 --duration 30s tests/k6/simple-success-test.js
      continue-on-error: false

  # ===============================================
  # PRODUCTION DEPLOYMENT
  # ===============================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, staging-smoke-tests]
    if: success()
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli@latest

    - name: Install dependencies
      run: npm ci --only=production

    # Deploy to Railway Production
    - name: Deploy to Railway Production
      id: deploy
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Link to production service/environment
        railway environment production 2>/dev/null || railway environment create production
        railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment production
        
        # Set production environment variables
        railway variables set NODE_ENV=production
        railway variables set JWT_SECRET=${{ secrets.JWT_SECRET }}
        railway variables set DATABASE_URL=${{ secrets.DATABASE_URL }}
        
        # Deploy with zero-downtime
        echo "üöÄ Deploying to Railway Production..."
        DEPLOYMENT_OUTPUT=$(railway up --detach --json)
        DEPLOYMENT_ID=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.id // "unknown"')
        
        # Get deployment URL
        DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url // "https://proyectop2preubas-production.railway.app"')
        
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "üìã Production deployed to: $DEPLOYMENT_URL"
        echo "üìã Deployment ID: $DEPLOYMENT_ID"

    # Production health check
    - name: Production Health Check
      run: |
        PROD_URL="${{ steps.deploy.outputs.url }}"
        echo "üîç Running production health check on: $PROD_URL"
        
        # Wait for deployment to be ready
        sleep 45
        
        # Comprehensive health check
        for i in {1..15}; do
          if curl -f -s "$PROD_URL/api/health" | grep -q "OK\|healthy\|success"; then
            echo "‚úÖ Production health check passed on attempt $i"
            break
          else
            echo "‚è≥ Production health check failed on attempt $i, retrying..."
            sleep 15
            if [ $i -eq 15 ]; then
              echo "‚ùå Production health check failed after 15 attempts"
              exit 1
            fi
          fi
        done

    # Verify API endpoints
    - name: Verify Production API
      run: |
        PROD_URL="${{ steps.deploy.outputs.url }}"
        echo "üîç Verifying production API endpoints..."
        
        # Test main endpoints
        curl -f "$PROD_URL/api/usuarios" > /dev/null || echo "‚ö†Ô∏è Usuarios endpoint issue"
        curl -f "$PROD_URL/api/servicios" > /dev/null || echo "‚ö†Ô∏è Servicios endpoint issue"
        curl -f "$PROD_URL/api/reservas" > /dev/null || echo "‚ö†Ô∏è Reservas endpoint issue"
        
        echo "‚úÖ Production API verification complete"

  # ===============================================
  # POST-DEPLOYMENT TESTS
  # ===============================================
  production-verification:
    name: üîç Production Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run production verification tests
      run: |
        echo "üîç Running production verification tests..."
        BASE_URL="${{ needs.deploy-production.outputs.deployment-url }}" k6 run --vus 5 --duration 1m tests/k6/simple-success-test.js
      continue-on-error: true

  # ===============================================
  # DEPLOYMENT SUMMARY & NOTIFICATIONS
  # ===============================================
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, production-verification]
    if: always()
    
    steps:
    - name: Generate Deployment Summary
      run: |
        echo "# üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Environment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | Status | URL | Health |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Staging** | ${{ needs.deploy-staging.result }} | [${{ needs.deploy-staging.outputs.deployment-url }}](${{ needs.deploy-staging.outputs.deployment-url }}) | ${{ needs.deploy-staging.outputs.health-check }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Production** | ${{ needs.deploy-production.result }} | [${{ needs.deploy-production.outputs.deployment-url }}](${{ needs.deploy-production.outputs.deployment-url }}) | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- üåê **Production API**: [${{ needs.deploy-production.outputs.deployment-url }}](${{ needs.deploy-production.outputs.deployment-url }})" >> $GITHUB_STEP_SUMMARY
        echo "- üîç **Health Check**: [${{ needs.deploy-production.outputs.deployment-url }}/api/health](${{ needs.deploy-production.outputs.deployment-url }}/api/health)" >> $GITHUB_STEP_SUMMARY
        echo "- üìä **Railway Dashboard**: [View Deployment](https://railway.app/project/${{ secrets.RAILWAY_PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: [\`${{ github.event.workflow_run.head_sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.event.workflow_run.head_sha }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.event.workflow_run.head_branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment ID**: \`${{ needs.deploy-production.outputs.deployment-id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: \`$(date -u)\`" >> $GITHUB_STEP_SUMMARY

    # Update README with latest deployment info
    - name: Update README deployment URLs
      if: needs.deploy-production.result == 'success'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README badges and URLs
      if: needs.deploy-production.result == 'success'
      run: |
        # Update deployment URLs in README
        PROD_URL="${{ needs.deploy-production.outputs.deployment-url }}"
        
        # Create/update deployment info in README
        if grep -q "## üöÄ Live Deployment" README.md; then
          sed -i "s|https://.*railway\.app|$PROD_URL|g" README.md
        else
          echo "" >> README.md
          echo "## üöÄ Live Deployment" >> README.md
          echo "" >> README.md
          echo "- **Production**: [$PROD_URL]($PROD_URL)" >> README.md
          echo "- **API Health**: [$PROD_URL/api/health]($PROD_URL/api/health)" >> README.md
          echo "- **Last Deploy**: $(date -u)" >> README.md
        fi
        
        # Commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "üöÄ Update deployment URLs [skip ci]"
        git push origin main || echo "No changes to push"
